<project-details>
    <p if={ state.load_error } class="error">{ this.state.load_error }</p>
    <div if={this.state.currentProject !== null}>   
        <h1 if={props.navActivePage.currentProjectAction !== 'cuelists' && props.navActivePage.currentProjectAction !== 'scenes' && props.navActivePage.currentProjectAction !== 'mapping' && props.navActivePage.currentProjectAction !== 'media'}><b>{this.state.title}</b>: Project Details</h1>     
        <div is="cue-list" data-riot-component if={props.navActivePage.currentProjectAction === 'cuelists'} project={this.state.currentProject} projectId={this.state.currentProject.id} cuelist={this.state.currentProject.cuelists[this.state.currentProject.currentCuelistIndex]}></div>
        <div is="scene-list" data-riot-component if={props.navActivePage.currentProjectAction === 'scenes'} project={this.state.currentProject}></div>
        <div is="device-mappings" data-riot-component if={props.navActivePage.currentProjectAction === 'mapping'} project={this.state.currentProject}></div>
        <div is="media-library" data-riot-component if={props.navActivePage.currentProjectAction === 'media'} project={this.state.currentProject}></div>
    </div>

    <div id="debug-footer" class="active" > 
        state.currentProject
        <textarea style="min-height: 20em;">{ JSON.stringify(this.state.currentProject) }</textarea>
        props
        <textarea style="min-height: 20em;">{ JSON.stringify(props) }</textarea>
    </div> 
    
    <script>
        import observable from '@riotjs/observable'
        var riot = require('riot')

        var STORAGE_KEY = 'zp-hub';

        window.projectStorage = {
            fetch: function () {
                let parsed = {};
                try {
                    parsed = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
                } catch (e) {
                    console.log('LS JSON parsing failed.' + e)
                    //this.update({ title: [], load_error: e });
                    return [];
                }
                return parsed;
            },
            save: function (projectData) {
                localStorage.setItem(STORAGE_KEY, JSON.stringify(projectData));
            }
        };
        
        export default {
            state: {
                title: 'Project',
                activePage: null,
                load_error: null,
                currentProject: null
            },
            async getProjectFromHub(_slug){
                const res = await fetch('/api/project?slug=' + _slug);
                if (res.status === 200) {
                    let data = {};
                    try{
                        data = await res.json();
                    }
                    catch(err){
                        this.update({ load_error: 'Error loading projects! JSON Error: ' + err});
                    }
                    if(data != {}){
                        if(typeof(data.currentCuelistIndex) == 'undefined'){
                            data.currentCuelistIndex = 0;
                        }
                        if(typeof(data.scenes[0]) == 'undefined'){
                            data.scenes[0] = {
                                "id": "sceneid1",
                                "name": "black",
                                "instructions": "bg color #000000"
                            }; 
                        }
                        if(typeof(data.virtual_devices[0]) == 'undefined'){
                            data.virtual_devices[0] = {
                                "id": "vdid1",
                                "name": "V Device 1",
                                "device_ids": ['fake']
                            }; 
                        }
                        if(typeof(data.real_devices) == 'undefined'){
                            data.real_devices = []; 
                        }
                        if(typeof(data.currentCuelistIndex == 0 && data.cuelists[data.currentCuelistIndex]) == 'undefined'){
                            data.cuelists[data.currentCuelistIndex] = {
                                "id": "cuelist0", 
                                "name": "Default Cuelist", 
                                "cues": [{
                                            "id": "cueid1",
                                            "label": "Default Cue",
                                            "mappings": [
                                                {
                                                "virtual_device_id": "vdid1",
                                                "scene_id": "sceneid1"
                                                }
                                            ]
                                        }]
                            };
                        }
                        this.update({ title: data.name, currentProject: data });
                        this.state.currentProject.test = "huhu";
                        console.log("project: " + this.state.currentProject.name);
                        projectStorage.save(data);
                        riot.eventBus.trigger('activeProject', data); 
                    }
                } else if (res.status === 400) {
                    const error = await res.json();
                    this.update({ title: [], load_error: error.message });
                } else {
                    console.log("else")
                    this.update({ load_error: 'Error loading projects! status code: ' + res.status});
                }
            },
            async getProject(_slug) {
                let getFromHub = 0;
                let localStorageData = await projectStorage.fetch();
                
                if(localStorageData != null && localStorageData != []){
                    if(localStorageData.slug == _slug){
                        if(typeof(localStorageData.currentCuelistIndex) == 'undefined'){
                            localStorageData.currentCuelistIndex = 0;
                        }
                        riot.eventBus.trigger('activeProject', localStorageData); 
                        this.update({ title: localStorageData.name, currentProject: localStorageData });
                       console.log("ls project: " + this.state.currentProject.name);
                    } else {
                        getFromHub = 1;
                    }
                } else {
                    getFromHub = 1;
                }

                if(getFromHub != 0){
                    this.getProjectFromHub(_slug);
                }
                
            },
            async saveProject() {
                const res = await fetch('/api/project/' + this.state.currentProject.id);
                let payload = {
                    scenes: this.state.currentProject.scenes,
                    virtual_devices: this.state.currentProject.virtual_devices,
                    cuelists: this.state.currentProject.cuelists,
                    meta: {name: this.state.currentProject.name, currentCuelistIndex: this.state.currentProject.currentCuelistIndex}
                };
                fetch('/api/project/' + this.state.currentProject.id, {
                    method: 'PUT',
                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json, text/plain, */*'},
                    body: JSON.stringify(payload)
                })
                .then(response => {
                    if (response.ok) {
                        // Handle the successful response
                        console.log('Form data uploaded successfully!');
                        this.getProject(this.state.currentProject.slug);
                    } else {
                        // Handle the error response
                        this.update({ load_error: 'Error creating project! status code: ' + response.statusText});
                        console.error('Error uploading form data:', response.statusText);
                    }
                })
                .catch(error => {
                    // Handle any network or other errors
                    console.error('Error uploading form data:', error);
                })
            },
            async changeCuelist(_cuelistIndex){
                this.state.currentProject.currentCuelistIndex = _cuelistIndex;
                riot.eventBus.trigger('data_changed'); 
                this.update(); 
            },
            async addCuelist(_cuelist){
                this.state.currentProject.cuelists.push(_cuelist);
                riot.eventBus.trigger('data_changed'); 
                this.update();      
            },
            async updateDevices(_json){
                
                
                if(typeof(this.state.currentProject.real_devices) == 'undefined'){
                    this.state.currentProject.real_devices = [];
                }  
                var arr1 = _json;
                var arr2 = this.state.currentProject.real_devices;
                this.state.currentProject.real_devices = arr1.concat(arr2.filter( ({a}) => !arr1.find(f => f.a == a) ));
                riot.eventBus.trigger('data_changed'); 
                this.update();
            },
            async onBeforeMount(props, state) {
                state.activePage = props.navActivePage;
                await this.getProject(props.params.slug)
            },
            onMounted(props, state) {
                const activePageUpdate = (input) => {
                    const activePage = input
                    this.update({
                        activePage
                    })
                    if(typeof state.activePage.currentProjectAction !== "undefined"){
                        console.log('current Action: ' + state.activePage.currentProjectAction)
                    }
                }

                const dataChanged = () => {
                    projectStorage.save(this.state.currentProject);
                    this.update();
                }

                const getProject = (_slug) => {
                    this.getProject(_slug);
                }

                const updateDevices = (_json) => {
                    this.updateDevices(_json);
                }

                const changeCuelist = (_cuelistIndex) => {
                    this.changeCuelist(_cuelistIndex);
                }

                const addCuelist = (_cuelist) => {
                    this.addCuelist(_cuelist);
                }

                const getProjectFromHub = (_slug) => {
                    this.getProjectFromHub(_slug);
                }

                const saveProject = () => {
                    this.saveProject();
                }
                
                riot.eventBus.on('activePage', function(_activePage) {  
                    activePageUpdate(_activePage);
                    if(typeof _activePage.currentProjectSlug !== 'undefined'){
                       getProject(_activePage.currentProjectSlug);
                    }   
                })

                riot.eventBus.on('data_changed',function() {     
                    dataChanged();
                });

                riot.eventBus.on('add_cuelist',function(cuelist) {
                    addCuelist(cuelist);
                });

                riot.eventBus.on('change_cuelist',function(cuelistIndex) {
                    changeCuelist(cuelistIndex);
                });

                riot.eventBus.on('update_devices',function(devices) {     
                    updateDevices(devices);
                });

                riot.eventBus.on('revert_project',function() {  
                    getProjectFromHub(props.params.slug);
                });

                riot.eventBus.on('save_project',function() {     
                    saveProject();
                });
            }
            
            
        }
    </script>
</project-details>