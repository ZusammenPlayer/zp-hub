<app>
  <div class="container">
      <router>
        <navigation ap={state.activePage}></navigation>
        <div class="main-content">
          <div if={state.showNotFound} class="row">
            <div class="column">
              <not-found />
            </div>
          </div>
          <div if={!state.showNotFound} class="row">
            <div class="column">
              <route each={page in state.pages} path={page.path}>
                <main is={page.componentName} params={route.params} ap={state.activePage}/>
              </route>
            </div>
          </div>
        <div>
      </router>
  </div>
  <sidebar></sidebar>

  <script>
    import { Router, Route, route, toRegexp, match } from '@riotjs/route'
    import lazy from '@riotjs/lazy'
    import Loader from './components/includes/loader/loader.riot'
    import NotFound from './pages/not-found.riot'
    import observable from '@riotjs/observable'
    import pages from './pages'
    var riot = require('riot')

    window.stateContainer = {}
    const defaultActivePage = pages.find(p => match('/', toRegexp(p.path)))
    export default {
      components: {
        Router,
        Route,
        NotFound,
        Home: lazy(Loader, () => import(
          /* webpackPrefetch: true, webpackChunkName: 'pages/home' */
          './pages/home-page.riot'
        )),
        Projectdetail: lazy(Loader, () => import(
          /* webpackPrefetch: true, webpackChunkName: 'pages/project-details' */
          './pages/project-details-page.riot'
        )),
        Debug: lazy(Loader, () => import(
          /* webpackPrefetch: true, webpackChunkName: 'pages/debug-page' */
          './pages/debug-page.riot'
        )),
      },
      state: {
        pages,
        showNotFound: false,
        activePage: defaultActivePage
      },
      onBeforeMount({ isServer }) {
        this.anyRouteStream = route('(.*)')
        this.anyRouteStream.on.value(this.onAnyRoute)
        
        var EventBus = function(){
            observable(this);
        }
        riot.eventBus = new EventBus();
      },
      onMounted(){
      },
      onAnyRoute(path) {
        // show the not found page if none of the page paths are matched
        var activePage = pages.find(p => match(path.pathname, toRegexp(p.path)))
        activePage.currentPath = path.pathname
        let pathComponents = path.pathname.split("/")
        if(pathComponents[1] === "project" && typeof pathComponents[2] !== "undefined" && pathComponents[2] != ""){
          activePage.currentProjectSlug = pathComponents[2]
          activePage.currentProjectPath = "/" + pathComponents[1] + "/" + pathComponents[2] + "/"
          if(typeof pathComponents[3] !== "undefined" && pathComponents[3] != ""){
            activePage.currentProjectAction = pathComponents[3]
          }
        }
        
       // console.log("oar " + path.pathname)
        this.update({
          activePage,
          showNotFound: !activePage
        })
        window.stateContainer.activePage = this.state.activePage
        riot.eventBus.trigger('activePage', window.stateContainer.activePage)
      },
      onBeforeUnmount() {
        this.anyRouteStream.end()
        this.projectRouteStream.end()
      }
      
    }
    
  </script>

  <style>
    :host {
      padding: 2rem 0;
    }

    .main-content {
      padding-top: 5.2rem;
    }

    /* .menu {
      margin: 1rem -1rem;
    } */

    .menu a {
      padding: 0 1rem;
      color: black;
    }

    .menu a.active.active {
      font-weight: bold;
      text-decoration: none;
    }

    .menu a:hover, .menu a:focus, .menu a:active {
      text-decoration: underline;
    }
  </style>
</app>
