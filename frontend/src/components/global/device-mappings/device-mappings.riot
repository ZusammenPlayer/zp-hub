<device-mappings>
    <style>
        .zp-container {
            padding: 5px;
            margin: 5px;
            width: "100%";
            background-color: #ddd;
        }
        .addDevice {
            max-width: 50%;
        }
    </style>

    <h1><b>{props.project.name}</b>: Device Mapping</h1>

    <div>
        <div class="row zp-container">
            <div class="column column-50"><b>Virtual Device Name</b></div>
            <div class="column column-50">
                <b>Associated Real Device IDs</b>
            </div>
        </div>
        <div class="row zp-container" each={(virtual_device, index) in props.project.virtual_devices}>
            <div class="column column-50">  
                <input type="text" name="virtual_device_name_{index}" id="virtual_device_name_{index}" size="30" maxlength="50" value="{virtual_device.name}">
                <button class="button-outline" onclick={(e) => edit_virtual_device_name(e, index, document.getElementById('virtual_device_name_'+index).value)}>  edit  </button>
            </div>
            <div class="column column-50"> 
                <div each={(id, index) in virtual_device.device_ids}> {index + 1} : {id} </div>
                <div if="{props.project.real_devices.length > virtual_device.device_ids.length}">
                    + : <select class="addDevice" name="select{virtual_device.id}" id="select{virtual_device.id}"">
                        <option each={(real_device, rd_index) in props.project.real_devices} value="{real_device.uid}" if="{virtual_device.device_ids.indexOf(real_device.uid) === -1}"> {real_device.uid} </option>
                    </select> <button class="button-outline" onclick={(e) => add_device_to_virtual_device(e, document.getElementById('select' + virtual_device.id).value, index)}>  add  </button>
                </div>
                <div if="{this.state.add_real_device_messages.length > index && this.state.add_real_device_messages[index].text !== ''}">{this.state.add_real_device_messages[index].text}</div>
                
            </div>
        </div>
        <div class="row zp-container">
            <div class="column column-50">  <input type="text" name="new_virtual_device_name" id="new_virtual_device_name" size="30" maxlength="50"></div>
            <div class="column column-50">  <button class="button-outline" onclick={(e) => add_virtual_device(e, document.getElementById('new_virtual_device_name').value)}>  add  virtual device</button> 
                <div if="{this.state.add_virtual_device_message.text !== ''}">{this.state.add_virtual_device_message.text}</div>
            </div>
        </div>
        
    </div>

    <script>
        import observable from '@riotjs/observable'
        var riot = require('riot');

        export default {
            props: {},
            state: {
                add_real_device_messages : [],
                add_virtual_device_message: {},
            },
            async onBeforeMount(props, state) {
                for(let virtual_device_index = 0; virtual_device_index < props.project.virtual_devices.length; virtual_device_index++){
                    state.add_real_device_messages[virtual_device_index] = {};
                    state.add_real_device_messages[virtual_device_index].text = "";
                }
                state.add_virtual_device_message.text = "";
            },
            add_device_to_virtual_device(e, real_device_id, virtual_device_index){
                e.preventDefault();
                if(real_device_id != ""){
                    if(this.props.project.virtual_devices[virtual_device_index].device_ids.indexOf(real_device_id) === -1){
                        this.props.project.virtual_devices[virtual_device_index].device_ids.push(real_device_id);
                        riot.eventBus.trigger('data_changed', {}); 
                        this.clear_messages();
                    } else {
                        this.state.add_real_device_messages[virtual_device_index] = {};
                        this.state.add_real_device_messages[virtual_device_index].text = "Already part of this virtual device!";
                        this.update();
                    }
                }
            },
            edit_virtual_device_name(e, virtual_device_index, virtual_device_name){
                e.preventDefault();
                if(virtual_device_name != ""){
                    this.props.project.virtual_devices[virtual_device_index].name = virtual_device_name;
                    riot.eventBus.trigger('data_changed', {}); 
                    this.clear_messages();
                    this.update();
                } else {
                    document.getElementById('virtual_device_name_'+virtual_device_index).value = "Please give it a name ;)";
                }
                
            },
            add_virtual_device(e, virtual_device_name){
                e.preventDefault();
                let uuid = self.crypto.randomUUID();

                if(virtual_device_name != ""){
                    let found_same_name = 0;
                    for(let virtual_device_index = 0; virtual_device_index < this.props.project.virtual_devices.length; virtual_device_index++){
                        if(this.props.project.virtual_devices[virtual_device_index].name == virtual_device_name){
                            found_same_name++;
                        }
                    }
                    if(found_same_name == 0){
                        let new_virtual_device = {
                            name: virtual_device_name,
                            device_ids: [],
                            id: uuid
                        };
                        this.props.project.virtual_devices.push(new_virtual_device);
                        riot.eventBus.trigger('data_changed', {}); 
                        document.getElementById('new_virtual_device_name').value = "";
                        this.clear_messages();
                    } else {
                        this.state.add_virtual_device_message.text = "There is another virtual device with the same name - please choose another one";
                        this.update();
                    }
                } else {
                    this.state.add_virtual_device_message.text = "Please enter a name";
                    this.update();
                }
            },
            clear_messages(){
                for(let virtual_device_index = 0; virtual_device_index < this.props.project.virtual_devices.length; virtual_device_index++){
                    this.state.add_real_device_messages[virtual_device_index] = {};
                    this.state.add_real_device_messages[virtual_device_index].text = "";
                    this.state.add_virtual_device_message.text = "";
                    this.update();
                }
            }
        }
        
    </script>

</device-mappings>