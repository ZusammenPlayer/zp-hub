<scene-list>

    <h1><b>{props.project.name}</b>: Scenes </h1>

    <div>
        <div class="item-container">
            <div class="column column-25"><b>Scene Name</b></div>
            <div class="column column-75"><b>Command</b></div>
        </div>
        <div class="item-container" each={(scene, index) in props.project.scenes}>
            <div class="column column-25">
                <input type="text" name="scene_name_{index}" id="scene_name_{index}" size="30" maxlength="50" value="{ scene.name}">
                <button class="button-outline" onclick={(e) => edit_scene_name(e, index, document.getElementById('scene_name_'+index).value)}>  change name  </button>
            </div> 
            <div class="column column-75">
                <textarea class="code" rows="1" id="instruction_{index}" value="{scene.instructions}"></textarea>
                <button class="button-outline" onclick={(e) => edit_scene_instruction(e, index, document.getElementById('instruction_'+index).value)}>  change instruction  </button> 
            </div>
        </div>
        <div class="item-container" >
            <div class="column column-25"><input type="text" name="new_scene_name" id="new_scene_name" size="30" maxlength="50"></div>
            <div class="column column-75"><button class="button-outline" onclick={(e) => add_scene(e, document.getElementById('new_scene_name').value)}>  add  scene</button> 
                <div if="{this.state.add_scene_message.text !== ''}">{this.state.add_scene_message.text}</div>
            </div>
        </div>
    </div>

    <script>
        import observable from '@riotjs/observable'
        import { v4 as uuidv4 } from 'uuid';
        
        var riot = require('riot');

        export default {
            props: {},
            state: {
                add_scene_message: {},
            },
            async onBeforeMount(props, state) {
                state.add_scene_message.text = "";
            },
            add_scene(e, new_scene_name){
                e.preventDefault();
                if(new_scene_name != ''){
                    let uuid = uuidv4();
                    let new_scene = {
                        instructions: "",
                        name: new_scene_name,
                        id: uuid,
                    };
                    this.props.project.scenes.push(new_scene);
                    riot.eventBus.trigger('data_changed'); 
                    document.getElementById('new_scene_name').value = "";
                    this.clear_messages();
                    this.update();
                } else {
                    this.state.add_scene_message.text = "Please give it a name ;)";
                    this.update();
                }
                
            },
            edit_scene_name(e, scene_index, scene_name){
                e.preventDefault();
                if(scene_name != ""){
                    this.props.project.scenes[scene_index].name = scene_name;
                    riot.eventBus.trigger('data_changed'); 
                    this.clear_messages();
                    this.update();
                } else {
                    document.getElementById('scene_name_'+scene_index).value = "Please give it a name ;)";
                }
                
            },
            edit_scene_instruction(e, scene_index, instruction){
                e.preventDefault();
                this.props.project.scenes[scene_index].instructions = instruction;
                riot.eventBus.trigger('data_changed'); 
                this.clear_messages();
                this.update();
            },
            clear_messages(){
                this.state.add_scene_message.text = "";
                this.update();
            },
            revert_project(e){
                e.preventDefault();
                riot.eventBus.trigger('revert_project'); 
            },
            save_project(e){
                e.preventDefault();
                riot.eventBus.trigger('save_project'); 
            }
        }
    </script>

</scene-list>
