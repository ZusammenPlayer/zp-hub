<scene-list>

    <style>
        .scene-container {
            padding: 5px;
            margin: 5px;
            width: "100%";
            background-color: #ddd;
        }
        .code {
            font-family:Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New, monospace;
        }
    </style>

    <h1><b>{props.project.name}</b>: Scenes</h1>

    <div>
        <div class="row scene-container">
            <div class="column column-25"><b>Scene Name</b></div>
            <div class="column column-75"><b>Command</b></div>
        </div>
        <div class="row scene-container" each={(scene, index) in props.project.scenes}>
            <div class="column column-25">
                <input type="text" name="scene_name_{index}" id="scene_name_{index}" size="30" maxlength="50" value="{ scene.name}">
                <button class="button-outline" onclick={() => edit_scene_name(index, document.getElementById('scene_name_'+index).value)}>  edit  </button>
            </div> 
            <div class="column column-75">
                <textarea class="code" rows="1" id="instruction_{index}" value="{scene.instructions}"></textarea>
                <button class="button-outline" onclick={() => edit_scene_instruction(index, document.getElementById('instruction_'+index).value)}>  edit  </button> 
            </div>
        </div>
        <div class="row scene-container" >
            <div class="column column-25"><input type="text" name="new_scene_name" id="new_scene_name" size="30" maxlength="50"></div>
            <div class="column column-75"><button class="button-outline" onclick={() => add_scene(document.getElementById('new_scene_name').value)}>  add  </button> 
                <div if="{this.state.add_scene_message.text !== ''}">{this.state.add_scene_message.text}</div>
            </div>
        </div>
    </div>
    <div id="debug-footer" class="active"> 
        <pre>{ JSON.stringify(props) }</pre>
    </div> 

    <script>
        export default {
            state: {
                add_scene_message: {},
            },
            async onBeforeMount(props, state) {
                state.add_scene_message.text = "";
            },
            add_scene(new_scene_name){
                if(new_scene_name != ''){
                    let new_scene = {
                        instructions: "",
                        name: new_scene_name,
                        id: 'sceneid' + (this.props.project.scenes.length + 1),
                    };
                    this.props.project.scenes.push(new_scene);
                    document.getElementById('new_scene_name').value = "";
                    this.clear_messages();
                    this.update();
                } else {
                    this.state.add_scene_message.text = "Please give it a name ;)";
                    this.update();
                }
                
            },
            edit_scene_name(scene_index, scene_name){
                alert(scene_name);
                if(scene_name != ""){
                    this.props.project.scenes[scene_index].name = scene_name;
                    this.clear_messages();
                    this.update();
                } else {
                    document.getElementById('scene_name_'+scene_index).value = "Please give it a name ;)";
                }
                
            },
            edit_scene_instruction(scene_index, instruction){
                this.props.project.scenes[scene_index].instructions = instruction;
                this.clear_messages();
                this.update();
            },
            clear_messages(){
                this.state.add_scene_message.text = "";
                this.update();
            }
        }
    </script>

</scene-list>
