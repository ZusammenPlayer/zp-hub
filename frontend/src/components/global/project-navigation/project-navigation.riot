<project-navigation>
    <div class="row">
        <nav class="navigation menu">
            <section class="container">
                <a class="navigation-title active" href="/">Zusammenplayer</a>
                <a class="navigation-title active" href="{ props.ap.currentProjectPath }">{state.title}</a>
                <a
                    each={page in state.projectPages}
                    class="navigation-title {props.ap.currentProjectAction != null && props.ap.currentProjectAction === page.componentName ? 'active' : '' }"
                    href={props.ap.currentProjectPath}{page.path}>
                    {page.label}
                </a>
            </section>
        </nav>
    </div>

  <script>
    import projectPages from '../../../project-pages.js'
    import observable from '@riotjs/observable'
    var riot = require('riot')
    
    export default {
        state: {
            title: 'Project',
            projectPages,
            activePage: null
        },
        // async getProject() {
        //         const res = await fetch('/api/project/' + );
        //         if (res.status === 200) {
        //             const data = await res.json();
        //             this.update({ projects: data });
        //         } else if (res.status === 400) {
        //             const error = await res.json();
        //             this.update({ projects: [], load_error: error.message });
        //         } else {
        //             this.update({ load_error: 'Error loading projects! status code: ' + res.status});
        //         }
        //     },
        //     async onBeforeMount(props, state) {
        //         await this.getProjects();
        //     },
        onBeforeMount(){
            
        },
        onMounted() {
            const activePageUpdate = (input) => {
                const activePage = input
                this.update({
                    activePage
                })
                if(typeof this.state.activePage.currentProjectAction !== "undefined"){
                    console.log('current Action: ' + this.state.activePage.currentProjectAction)
                }
            }

            
            riot.eventBus.on('activePage', function(input) {     
                activePageUpdate(input)
            })
            
            const titleUpdate = (input) => {
                const title = input
                this.update({
                    title
                })
            }
            const getProps = () => {
                return this.props
            }
            setTimeout(function(){
                
                let _props = getProps()
                titleUpdate(_props.ap.currentProjectSlug)
            },5000)
        }
        
        
    }
  </script>
</project-navigation>