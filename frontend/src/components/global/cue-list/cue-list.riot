<cue-list>
    <style>
        
        .select {
            max-width: 50%;
        }
        .mapping {
            max-width: 40%;
        }
    </style>

    <h1><b>{props.project.name}</b>: Cuelists</h1>
    <div class="row-wrap item-container">
        <div class="column column-40">
            <select if="{typeof props.project.cuelists != 'undefined' && props.project.cuelists.length > 1}" class="select" name="sel_cuelist" id="sel_cuelist">
                <option each={ (cuelist, cuelist_index) in props.project.cuelists } id="cuelist{cuelist_index}" value="{cuelist_index}" selected="{props.project.currentCuelistIndex == cuelist_index}">{props.project.cuelists[cuelist_index].name}</option>
            </select>
            <button if="{typeof props.project.cuelists != 'undefined' && props.project.cuelists.length > 1}" class="button-outline" onclick={(e) => change_cuelist(e, document.getElementById('sel_cuelist').value)}>  change cuelist  </button>
            <p if="{typeof props.project.cuelists != 'undefined' && props.project.cuelists.length < 2}"><strong>{typeof props.project.cuelists[0] != 'undefined' && typeof props.project.cuelists[0].name != 'undefined' ? "Current cuelist: " + props.project.cuelists[0].name : 'You don\'t have a cue list yet. Please create one!'}</strong></p>
            <p if="{typeof props.project.cuelists == 'undefined'}"><strong>You don't have a cue list yet. Please create one!</strong></p>
        </div>
        <div class="column column-60">
            <strong>+</strong> &nbsp; <input type="text" name="cuelist_name_new" id="cuelist_name_new" class="select" size="20" maxlength="50" value="">
            <button class="button-outline" onclick={(e) => add_cuelist(e, document.getElementById('cuelist_name_new').value)}>  create new cuelist  </button>
            <div if="{typeof this.state.add_cuelist_message !== 'undefined' && this.state.add_cuelist_message != ''}">{this.state.add_cuelist_message}</div>
        </div>
    </div>
    <div if="{typeof props.project.cuelists != 'undefined' && typeof props.project.currentCuelistIndex != 'undefined' && typeof props.project.cuelists[props.project.currentCuelistIndex] != 'undefined'}">
        <div>
            <button onclick={(e) => triggerPause(e)}>pause all</button>
        </div>
        <div class="item-container">
            <div class="column column-30"><b>Cue Label</b></div>
            <div class="column column-50"><b>Mapping (Virtual Device -> Scene)</b></div>
            <div class="column column-20"><b>Action</b></div>
        </div>
        <div class="item-container" each={ (cue, cue_index) in props.project.cuelists[props.project.currentCuelistIndex].cues } 
            if="{typeof props.project.cuelists != 'undefined' && typeof props.project.currentCuelistIndex != 'undefined' && typeof props.project.cuelists[props.project.currentCuelistIndex] != 'undefined' && typeof props.project.cuelists[props.project.currentCuelistIndex].cues != 'undefined'}">
            <div class="column column-30">
                <input type="text" name="cue_label_{cue_index}" id="cue_label_{cue_index}" size="30" maxlength="50" value="{ cue.label}">
                <button class="button-outline" onclick={(e) => change_cue_label(e, cue_index, document.getElementById('cue_label_'+cue_index).value)}>  change name  </button>
                <div if="{typeof this.state.change_label_messages[cue_index] !== 'undefined' && this.state.change_label_messages[cue_index] != ''}">{this.state.change_label_messages[cue_index]}</div>
            </div>
            <div class="column column-50">
                <div each={(mapping, mapping_index) in props.project.cuelists[props.project.currentCuelistIndex].cues[cue_index].mappings}>
                    <div>
                        <select class="mapping" name="mapping_vdid_{cue_index}_{mapping_index}" id="mapping_vdid_{cue_index}_{mapping_index}">
                            <option value=""> delete </option>
                            <option each={virtual_device in props.project.virtual_devices} value="{virtual_device.id}" selected="{virtual_device.id == mapping.virtual_device_id}"> {virtual_device.name} </option>
                        </select> 
                        <select class="mapping" name="mapping_scene_{cue_index}_{mapping_index}" id="mapping_scene_{cue_index}_{mapping_index}">
                            <option value=""> do nothing </option>
                            <option each={scene in props.project.scenes} value="{scene.id}" selected="{scene.id == mapping.scene_id}"> {scene.name} </option>
                        </select>
                        <button class="button-outline" onclick={(e) => change_single_mapping(e, document.getElementById('mapping_vdid_' + cue_index + '_' + mapping_index).value, document.getElementById('mapping_scene_' + cue_index + '_' + mapping_index).value, mapping_index, cue_index)}>apply changes</button>
                        <div if="{typeof this.state.change_single_mapping_messages[cue_index + '_' + mapping_index] !== 'undefined' && this.state.change_single_mapping_messages[cue_index + '_' + mapping_index] != ''}">{this.state.change_single_mapping_messages[cue_index + '_' + mapping_index]}</div>
                    </div>
                </div>
                <div if="{props.project.scenes.length == 0 || props.project.virtual_devices.length == 0 || props.project.virtual_devices.length > props.project.cuelists[props.project.currentCuelistIndex].cues[cue_index].mappings.length}">
                    <div if="{props.project.scenes.length > 0 && props.project.virtual_devices.length > 0}">
                        <select class="mapping" name="mapping_vdid_{cue_index}_new" id="mapping_vdid_{cue_index}_new">
                            <option value=""> ... </option>
                            <option each={virtual_device in props.project.virtual_devices} value="{virtual_device.id}"> {virtual_device.name} </option>
                        </select> 
                        <select class="mapping" name="mapping_scene_{cue_index}_new" id="mapping_scene_{cue_index}_new">
                            <option value=""> ... </option>
                            <option each={scene in props.project.scenes} value="{scene.id}"> {scene.name} </option>
                        </select>
                        <button class="button-outline" onclick={(e) => add_mapping(e, document.getElementById('mapping_vdid_' + cue_index + '_new').value, document.getElementById('mapping_scene_' + cue_index + '_new').value, cue_index)}>  add  </button>
                    </div>
                    <div if="{props.project.scenes.length == 0 || props.project.virtual_devices.length == 0}">
                        <div if="{props.project.scenes.length == 0}"> Please create at least one scene first. (<a href="scenes">Scenes</a>)</div>
                        <div if="{props.project.virtual_devices.length == 0}">Please create at least one virtual device first. (<a href="mapping">Device Mapping</a>)</div>
                    </div>
                    <div if="{typeof this.state.change_single_mapping_messages[cue_index + '_new'] !== 'undefined' && this.state.change_single_mapping_messages[cue_index + '_new'] != ''}">{this.state.change_single_mapping_messages[cue_index + '_new']}</div>
                </div>
                
            </div>
            <div class="column column-20">
                <button data-id={cue.id} onclick={(e) => triggerCue(e)}>Go</button>
            </div>
        </div>
        <div class="item-container" if="{typeof props.project.cuelists != 'undefined' && typeof props.project.cuelists[0] != 'undefined' && typeof props.project.currentCuelistIndex != 'undefined' && typeof props.project.cuelists[props.project.currentCuelistIndex] != 'undefined'}">
            <div class="column column-30" if="{typeof props.project.scenes != 'undefined' && typeof props.project.virtual_devices != 'undefined' && props.project.scenes.length > 0 && props.project.virtual_devices.length > 0}">
                Add Cue: <input type="text" name="cue_label_new" id="cue_label_new" size="30" maxlength="50" value="" style="max-width: 30%;">
                <button class="button-outline" onclick={(e) => add_cue(e, document.getElementById('cue_label_new').value)}>add</button>
                <div if="{typeof this.state.change_label_messages['new'] !== 'undefined' && this.state.change_label_messages['new'] != ''}">{this.state.change_label_messages['new']}</div>
            </div>
            <div if="{props.project.scenes.length == 0 || props.project.virtual_devices.length == 0}">
                <div><p><strong>Please do the following to create a cue: </strong></p></div>
                <div if="{props.project.scenes.length == 0}"> Please create at least one scene first. (<a href="scenes">Scenes</a>)</div>
                <div if="{props.project.virtual_devices.length == 0}">Please create at least one virtual device first. (<a href="mapping">Device Mapping</a>)</div>
            </div>
        </div>
    <div>
        
    
    <script>
        import observable from '@riotjs/observable'
        import { v4 as uuidv4 } from 'uuid';

        var riot = require('riot');

        export default {
            props: {},
            state: {
                vdevID2Index: {},
                sceneID2Index: {},
                change_single_mapping_messages: {},
                change_label_messages: {},
                add_cuelist_message: '',
            },
            async onBeforeMount(props, state) {
                if(this.props.project.virtual_devices){
                    for(let virtual_device_index = 0; virtual_device_index < this.props.project.virtual_devices.length; virtual_device_index++){
                    this.state.vdevID2Index[this.props.project.virtual_devices[virtual_device_index].id] = virtual_device_index;
                    }
                    for(let scene_index = 0; scene_index < this.props.project.scenes.length; scene_index++){
                        this.state.sceneID2Index[this.props.project.scenes[scene_index].id] = scene_index; 
                    }
                }
            },
            async onMount(props, state) {
                this.update();
            },
            async triggerCue(e) {
                e.preventDefault();
                const data = {
                    projectId: this.props.project.id,
                    cuelistId: this.props.project.cuelists[this.props.project.currentCuelistIndex].id,
                    cueId: e.target.dataset.id
                };
                fetch('/api/project/trigger', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json, text/plain, */*'},
                    body: JSON.stringify(data)
                })
                .then(response => {
                    if (response.ok) {
                        console.log('Triggered cue ' + e.target.dataset.id + ' successfully!');
                    } else {
                        console.log(response.statusText);
                    }
                })
                .catch(error => {
                    // Handle any network or other errors
                    console.error('Error triggering:', error);
                })
            },
            async triggerPause(e) {
                e.preventDefault();
                const data = { projectId: this.props.project.id };
                fetch('/api/project/pause', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json, text/plain, */*'},
                    body: JSON.stringify(data)
                })
                .then(response => {
                    if (response.ok) {
                        console.log('Triggered pause successfully!');
                    } else {
                        console.log(response.statusText);
                    }
                })
                .catch(error => {
                    // Handle any network or other errors
                    console.error('Error triggering pause:', error);
                })
            },
            //select cuelist
            change_cuelist(e, cuelist_index){
                e.preventDefault();
                this.props.project.currentCuelistIndex = cuelist_index;
                riot.eventBus.trigger('data_changed'); 
                this.state.unsavedChanges = true;
                this.update();
            },
            //mappings
            change_single_mapping(e, vdid, scene_id, mapping_index, cue_index){
                e.preventDefault();
                this.clear_messages();
                if(vdid == ""){
                    //delete mapping
                    this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cue_index].mappings.splice(mapping_index, 1);
                    this.update();
                } else  {
                    //check if player has already another mapping
                    let found_same_mapping = 0;
                    for(let mappings_index = 0; mappings_index < this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cue_index].mappings.length; mappings_index++){
                        if(this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cue_index].mappings[mappings_index].virtual_device_id == vdid && mappings_index != mapping_index){
                            found_same_mapping++;
                        }
                    }
                    if(found_same_mapping == 0){
                        this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cue_index].mappings[mapping_index] = {"virtual_device_id": vdid, "scene_id": scene_id};
                        riot.eventBus.trigger('data_changed'); 
                        this.update();
                    } else {
                        document.getElementById('mapping_vdid_' + cue_index + '_' + mapping_index).value = this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cue_index].mappings[mapping_index].virtual_device_id;
                        this.display_single_mapping_message(cue_index, mapping_index, "Found same mapping. Please choose another one.");
                        this.update();
                    }
                }
                
            },
            add_mapping(e, vdid, scene_id, cue_index){
                e.preventDefault();
                this.clear_messages();
                if(vdid != ""){
                    //check if player has already another mapping
                    let found_same_mapping = 0;
                    for(let mappings_index = 0; mappings_index < this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cue_index].mappings.length; mappings_index++){
                        if(this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cue_index].mappings[mappings_index].virtual_device_id == vdid){
                            found_same_mapping++;
                        }
                    }
                    if(found_same_mapping == 0){
                        this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cue_index].mappings.push({"virtual_device_id": vdid, "scene_id": scene_id});
                        riot.eventBus.trigger('data_changed'); 
                        if(document.getElementById('mapping_vdid_' + cue_index + '_new'))
                            document.getElementById('mapping_vdid_' + cue_index + '_new').value = "";
                        if(document.getElementById('mapping_scene_' + cue_index + '_new'))
                            document.getElementById('mapping_scene_' + cue_index + '_new').value = "";
                        this.update();
                    } else {
                        this.display_single_mapping_message(cue_index, 'new', "Found same mapping. Please choose another one.");
                        this.update();
                    }
                } else {
                    //no vdev
                    this.display_single_mapping_message(cue_index, 'new', "Please choose a virtual device");
                    this.update();
                }
                
            },
            //cues
            change_cue_label(e, cue_index,label){
                e.preventDefault();
                this.clear_messages();
                if(label != ""){
                    //check if another cue has the same label
                    let found_same_label = 0;
                    for(let cues_index = 0; cues_index < this.props.project.cuelists[this.props.project.currentCuelistIndex].cues.length; cues_index++){
                        if(this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cues_index].label == label && cues_index != cue_index){
                            found_same_label++;
                        }
                    }
                    if(found_same_label == 0){
                        this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cue_index].label = label;
                        riot.eventBus.trigger('data_changed'); 
                        this.update();
                    } else {
                        document.getElementById('cue_label_' + cue_index).value = this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cue_index].label;
                        this.display_label_message(cue_index, "Found another cue with the same label. Please choose another one.");
                        this.update();
                    }
                } else {
                    //empty label
                    this.display_label_message(cue_index, "Please enter a label");
                    this.update();
                }
            },
            add_cue(e, _label){
                e.preventDefault();
                this.clear_messages();
                if(_label != ""){
                    //check if another cue has the same label
                    let found_same_label = 0;
                    if(typeof this.props.project.cuelists[this.props.project.currentCuelistIndex].cues == "undefined"){
                        this.props.project.cuelists[this.props.project.currentCuelistIndex].cues = [];
                    }
                    for(let cues_index = 0; cues_index < this.props.project.cuelists[this.props.project.currentCuelistIndex].cues.length; cues_index++){
                        if(this.props.project.cuelists[this.props.project.currentCuelistIndex].cues[cues_index].label == _label){
                            found_same_label++;
                        }
                    }
                    if(found_same_label == 0){
                        let uuid = uuidv4();
                        this.props.project.cuelists[this.props.project.currentCuelistIndex].cues.push({'label': _label, "id": uuid,"mappings": []});
                        riot.eventBus.trigger('data_changed'); 
                        document.getElementById('cue_label_new').value = "";
                        this.update();
                    } else {
                        this.display_label_message('new', "Found another cue with the same label. Please choose another one.");
                        this.update();
                    }
                } else {
                    //empty label
                    this.display_label_message('new', "Please enter a label");
                    this.update();
                }
            },
            add_cuelist(e, _name){
                e.preventDefault();
                if(_name != ""){
                    //check if another cue has the same label
                    let found_same_name = 0;
                    for(let cuelists_index = 0; cuelists_index < this.props.project.cuelists.length; cuelists_index++){
                        if(this.props.project.cuelists[cuelists_index].name == _name){
                            found_same_name++;
                        }
                    }
                    if(found_same_name == 0){
                        let uuid = uuidv4();
                        let uuid2 = uuidv4();
                        this.props.project.cuelists.push({'name': _name, "id": uuid,"cues": []});
                        document.getElementById('cuelist_name_new').value = "";
                        this.state.add_cuelist_message = "Cuelist '" + _name + "' added.";
                        riot.eventBus.trigger('data_changed'); 
                        this.update();
                    } else {
                        this.state.add_cuelist_message = "Found another cuelist with the same name. Please choose another one.";
                        this.update();
                    }
                } else {
                    //empty label
                    this.state.add_cuelist_message = "Please enter a label";
                    this.update();
                }
            },
            //messages
            display_single_mapping_message(cue_index, mapping_index, text){
                if(mapping_index = "new"){
                    this.state.change_single_mapping_messages[cue_index + '_new'] = text;
                } else {
                    this.state.change_single_mapping_messages[cue_index + '_' + mapping_index] = text;
                }
                
            },
            display_label_message(cue_index, text){
                this.state.change_label_messages[cue_index] = text;
            },
            clear_messages(){
                this.state.change_label_messages = {};
                this.state.add_cuelist_message = '';
                this.state.change_single_mapping_messages = {};
                this.update();
            }
        }
    </script>
</cue-list>
