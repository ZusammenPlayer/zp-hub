<device-list>

  <style>
    .zp-device {
      width: 90%;
      margin-left: 10px;
      background-color: #f2f6f1;
    }
    .zp-device-header {
      background-color: #747972;
      width: 100%;
      margin: 0;
      color: #f2f6f1;
      padding-left: 1em;
      font-size: small;
    }
    .device-wrapper {
      margin-bottom: 0.5em;
    }
    .device-row {
      height: 80vh;
      overflow-y: scroll;
    }
    .zp-device-info {
      padding: 0 1em;
    }
    .active {
      background-color: lightgreen; color: black
    }
  </style>

  <h4><b>Known Devices</b></h4>

  <div class="device-row"> 
    <div each={ device in state.devices } class="device-wrapper">
      <div  class="zp-device {device.online  !== false ? 'active' : ''}">      
        <div class="zp-device-header"><b>{ device.uid }</b></div>
       <div class="zp-device-info">   <!-- <small>&nbsp;id: {device.uid}</small> <br/>-->
          <small>&nbsp;type: { device.type }</small>
        </div>
        <div class="zp-device-info">  <small>&nbsp;status: {device.status}</small></div>
      </div>
    </div>
  </div> 
  
  <script>
    import observable from '@riotjs/observable'
    var riot = require('riot');
    const io = require('socket.io-client');
    export default {
      state: {
        devices: []
      },
      async onBeforeMount(props, state) {
        console.log('init socket io');

        const socket = io();
        
        socket.on("connect", () => {
          console.log('connected: ' + socket.id);
          const uid = 'web-client-' + Math.floor(Math.random()*90000) + 10000;
          const device_data = {
            'name': 'web ui',
            'type': 'web',
            'uid': uid
          }
          socket.emit('register', device_data);
        });

        socket.on("disconnect", () => {
          console.log('disconnected: ' + socket.id);
        });

        socket.on('device-list', (data) => {
          console.log('event: device-list');
          const data_from_json = JSON.parse(data);
          console.log('device-list: ' + data_from_json);
          riot.eventBus.trigger('data_changed'); 
          riot.eventBus.trigger('update_devices', data_from_json); 
          this.update({devices: data_from_json});
        })


      },
    }
  </script>
</device-list>
