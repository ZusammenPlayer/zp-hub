<project-list>

    <style>
        .error {
            color: #ff0000;
        }
        .project-list-item {
            padding: 5px;
        }
    </style>
    
    <h2>projects</h2>

    <p if={ state.load_error } class="error">{ state.load_error }</p>

    <div>
        <div each={ project in state.projects } class="project-list-item">
            <a href='project/{ project.slug }'>{ project.name }</a>
        </div>
    </div>
    <input type="text" name="name" id="newProjectName">
    <button class="button-outline" onclick={(e) => createNewProject(e, document.getElementById('newProjectName').value) }>  create new project  </button>
    <script>
        //reset local storage
        console.log('reset local storage')
        var PROJECT_STORAGE_KEY = 'zp-hub-project';
        localStorage.setItem(PROJECT_STORAGE_KEY, '');
        

        export default {
            state: {
                projects: [],
                load_error: null
            },
            async getProjects() {
                const res = await fetch(`/api/project/all`);
                if (res.status === 200) {
                    const data = await res.json();
                    this.update({ projects: data });
                } else if (res.status === 400) {
                    const error = await res.json();
                    this.update({ projects: [], load_error: error.message });
                } else {
                    this.update({ load_error: 'Error loading projects! status code: ' + res.status});
                }
            },
            async createNewProject(e, _name) {
                e.preventDefault();
                let payload = {name: _name};
                await fetch(`/api/project`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json, text/plain, */*'},
                    body: JSON.stringify(payload)
                })
                .then(response => {
                    if (response.ok) {
                        // Handle the successful response
                        console.log('Form data uploaded successfully!');
                        this.getProjects();
                        document.getElementById('newProjectName').value = '';
                    } else {
                        // Handle the error response
                        response.json().then(body => this.update({ load_error: 'Error creating project! status code: ' + body.message}));
                        console.error('Error uploading form data:', response.statusText);
                        document.getElementById('newProjectName').value = '';
                    }
                })
                .catch(error => {
                    // Handle any network or other errors
                    console.error('Error uploading form data:', error);
                })
            },
            async onBeforeMount(props, state) {
                await this.getProjects();


            },
        }
    </script>
</project-list>
